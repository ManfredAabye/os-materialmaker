name: Build os-materialmaker Windows

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller>=6.0.0 pillow>=10.0.0 requests>=2.31.0 tkinterdnd2 numpy
        
    - name: Get latest version file
      id: get_version
      run: |
        $files = Get-ChildItem -Name "os-materialmaker_*.py" | Sort-Object {
          # Extract version numbers for proper sorting
          if ($_ -match "os-materialmaker_(\d+)\.(\d+)\.(\d+)\.py") {
            [version]"$($matches[1]).$($matches[2]).$($matches[3])"
          } else { [version]"0.0.0" }
        }
        $latest = $files | Select-Object -Last 1
        if (-not $latest) {
          Write-Error "No os-materialmaker_*.py files found!"
          exit 1
        }
        $version = ($latest -replace "os-materialmaker_(.+)\.py", '$1')
        Write-Output "latest_file=$latest" >> $env:GITHUB_OUTPUT
        Write-Output "version=$version" >> $env:GITHUB_OUTPUT
        Write-Host "Latest file: $latest"
        Write-Host "Version: $version"
        
    - name: Syntax check
      run: |
        $file = "${{ steps.get_version.outputs.latest_file }}"
        Write-Host "Checking syntax for file: $file"
        if (-not (Test-Path $file)) {
          Write-Error "File not found: $file"
          exit 1
        }
        python -m py_compile $file
        
    - name: Build with PyInstaller
      run: |
        $iconPath = ""
        if (Test-Path "Resources\PBRlogok.png") { $iconPath = "--icon=Resources\PBRlogok.png" }
        
        pyinstaller --onefile --windowed --name "os-materialmaker-${{ steps.get_version.outputs.version }}-windows" $iconPath --add-data "Resources;Resources" --hidden-import="tkinter" --hidden-import="PIL" --hidden-import="tkinterdnd2" --hidden-import="numpy" ${{ steps.get_version.outputs.latest_file }}
        
    - name: Create portable package
      run: |
        New-Item -ItemType Directory -Path "portable" -Force
        Copy-Item "dist\os-materialmaker-${{ steps.get_version.outputs.version }}-windows.exe" "portable\"
        if (Test-Path "Resources") { Copy-Item "Resources" "portable\" -Recurse }
        if (Test-Path "README.md") { Copy-Item "README.md" "portable\" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "portable\" }
        
        @"
        @echo off
        echo Starting os-materialmaker...
        os-materialmaker-${{ steps.get_version.outputs.version }}-windows.exe
        pause
        "@ | Out-File -FilePath "portable\start.bat" -Encoding ASCII
        
        Compress-Archive -Path "portable\*" -DestinationPath "os-materialmaker-${{ steps.get_version.outputs.version }}-windows-portable.zip"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-${{ steps.get_version.outputs.version }}
        path: |
          dist/os-materialmaker-${{ steps.get_version.outputs.version }}-windows.exe
          os-materialmaker-${{ steps.get_version.outputs.version }}-windows-portable.zip

  release:
    # Erstelle Release bei Tags, manueller Ausführung ODER bei Push auf main
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: [build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        
    - name: List downloaded files (debug)
      run: |
        echo "=== Downloaded files ==="
        ls -la
        echo "=== EXE files ==="
        find . -name "*.exe" -type f || echo "No EXE files found"
        echo "=== ZIP files ==="  
        find . -name "*.zip" -type f || echo "No ZIP files found"
        
    - name: Get version from tag or build
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Release von Git-Tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version from tag: $VERSION"
        else
          # Release von normalem Push - verwende aktuelle Datei-Version
          latest=$(ls os-materialmaker_*.py | sort -V | tail -1 2>/dev/null || echo "os-materialmaker_1.0.74.py")
          VERSION=$(echo $latest | sed 's/os-materialmaker_\(.*\)\.py/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version from file: $VERSION"
        fi
        
    # Backup: Upload als Artifacts falls Release fehlschlägt
    - name: Upload release artifacts as backup
      uses: actions/upload-artifact@v4
      with:
        name: release-files-v${{ steps.get_version.outputs.version }}
        path: |
          **/*.exe
          **/*.zip
        retention-days: 90
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      with:
        tag_name: "os-materialmaker-v${{ steps.get_version.outputs.version }}-${{ github.sha }}"
        name: "OS Material Maker v${{ steps.get_version.outputs.version }} (Build ${{ github.sha }})"
        body: |
          ## OS Material Maker v${{ steps.get_version.outputs.version }}
          
          ### 🚀 Features
          - PBR Material Editor für Second Life/OpenSim
          - Kategorisierte Parameter mit Emoji-Icons  
          - GLTF Export Funktionalität
          - Auto-Find Algorithmus für Texturen
          - Vereinfachte 2D-Vorschau
          
          ### 📦 Downloads
          - **Windows EXE**: Standalone ausführbare Datei
          - **Windows Portable**: Entpacke und führe start.bat aus
          
        files: |
          **/*.exe
          **/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        
    - name: Release Summary
      run: |
        echo "## 📦 Release Summary v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        for file in *.exe *.zip; do
          if [ -f "$file" ]; then
            size=$(ls -lh "$file" | awk '{print $5}')
            echo "- 📁 **$file** ($size)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download:" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **Falls Release fehlschlägt**: Download aus **Artifacts** Section oben." >> $GITHUB_STEP_SUMMARY
        echo "✅ **Falls Release erfolgreich**: Download aus **Releases** auf GitHub." >> $GITHUB_STEP_SUMMARY
